// src/components/AdvancedTriviaGame.jsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion'; 
import questionIllustration from '../assets/ask.svg';

const questions = [
  {
    question: "What does AI stand for?",
    options: ["Automated Intelligence", "Artificial Intelligence", "Analytical Integration"],
    answer: "Artificial Intelligence",
    hint: "Think of intelligence generated by computers.",
  },
  {
    question: "What is a common type of cybersecurity threat?",
    options: ["Malware", "Watermarking", "HTML Injection"],
    answer: "Malware",
    hint: "It involves harmful software that affects computers.",
  },
  {
    question: "What is Cyberstream's focus area?",
    options: ["Food Industry", "Cybersecurity & AI", "Fashion"],
    answer: "Cybersecurity & AI",
    hint: "Think of security and intelligence in tech.",
  },
];

const AdvancedTriviaGame = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [timeLeft, setTimeLeft] = useState(10); // Timer in seconds
  const [hintUsed, setHintUsed] = useState(false);
  const [hintVisible, setHintVisible] = useState(false);

  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setInterval(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearInterval(timer);
    } else {
      handleNextQuestion();
    }
  }, [timeLeft]);

  const handleNextQuestion = () => {
    setTimeLeft(20);
    setHintUsed(false);
    setHintVisible(false);

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  const handleAnswerClick = (selectedOption) => {
    if (selectedOption === questions[currentQuestion].answer) {
      setScore(score + (hintUsed ? 0.5 : 1)); // Reduce score if hint was used
    }
    handleNextQuestion();
  };

  const showHint = () => {
    setHintUsed(true);
    setHintVisible(true);
  };

  const resetGame = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowResult(false);
    setTimeLeft(10);
    setHintUsed(false);
  };

  return (
    <div className="text-center mt-20 p-6 rounded-lg bg-neutral-800 shadow-lg max-w-lg mx-auto">
      {showResult ? (
        <div>
          <h2 className="text-3xl text-orange-500">Your Score: {score}/{questions.length}</h2>
          <button
            onClick={resetGame}
            className="mt-4 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
          >
            Play Again
          </button>
        </div>
      ) : (
        <AnimatePresence>
          <motion.div
            key={currentQuestion}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ duration: 0.3 }}
          >
            <img src={questionIllustration} alt="Question Illustration" className="w-1/2 mx-auto mb-4" />
            <h3 className="text-xl mb-4 text-orange-300">
              {questions[currentQuestion].question}
            </h3>
            <div className="space-y-3">
              {questions[currentQuestion].options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => handleAnswerClick(option)}
                  className="w-full px-4 py-2 text-left bg-neutral-700 text-white rounded-lg hover:bg-orange-500 transition"
                >
                  {option}
                </button>
              ))}
            </div>
            <div className="mt-4">
              <span className="text-neutral-400">Time Left: {timeLeft}s</span>
            </div>
            <div className="mt-4 flex justify-between items-center">
              <span className="text-neutral-400">Question {currentQuestion + 1} of {questions.length}</span>
              <button
                onClick={showHint}
                disabled={hintUsed}
                className="bg-neutral-600 px-2 py-1 rounded text-neutral-100 hover:bg-orange-400"
              >
                {hintUsed ? "Hint Used" : "Use Hint"}
              </button>
            </div>
            {hintVisible && <p className="mt-2 text-sm text-orange-300">{questions[currentQuestion].hint}</p>}
          </motion.div>
        </AnimatePresence>
      )}
    </div>
  );
};

export default AdvancedTriviaGame;






























































// Not advanced 

// // src/components/TriviaGame.jsx
// import React, { useState } from 'react';

// const questions = [
//   {
//     question: "What does AI stand for?",
//     options: ["Automated Intelligence", "Artificial Intelligence", "Analytical Integration"],
//     answer: "Artificial Intelligence",
//   },
//   {
//     question: "What is a common type of cybersecurity threat?",
//     options: ["Malware", "Watermarking", "HTML Injection"],
//     answer: "Malware",
//   },
//   {
//     question: "What is Cyberstream's focus area?",
//     options: ["Food Industry", "Cybersecurity & AI", "Fashion"],
//     answer: "Cybersecurity & AI",
//   },
// ];

// const TriviaGame = () => {
//   const [currentQuestion, setCurrentQuestion] = useState(0);
//   const [score, setScore] = useState(0);
//   const [showResult, setShowResult] = useState(false);

//   const handleAnswerClick = (selectedOption) => {
//     if (selectedOption === questions[currentQuestion].answer) {
//       setScore(score + 1);
//     }

//     const nextQuestion = currentQuestion + 1;
//     if (nextQuestion < questions.length) {
//       setCurrentQuestion(nextQuestion);
//     } else {
//       setShowResult(true);
//     }
//   };

//   const resetGame = () => {
//     setCurrentQuestion(0);
//     setScore(0);
//     setShowResult(false);
//   };

//   return (
//     <div className="text-center p-6 rounded-lg bg-neutral-800 shadow-lg">
//       {showResult ? (
//         <div>
//           <h2 className="text-3xl text-orange-500">Your Score: {score}/{questions.length}</h2>
//           <button
//             onClick={resetGame}
//             className="mt-4 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition"
//           >
//             Play Again
//           </button>
//         </div>
//       ) : (
//         <div>
//           <h3 className="text-xl mb-4 text-orange-300">{questions[currentQuestion].question}</h3>
//           <div className="space-y-3">
//             {questions[currentQuestion].options.map((option, index) => (
//               <button
//                 key={index}
//                 onClick={() => handleAnswerClick(option)}
//                 className="w-full px-4 py-2 text-left bg-neutral-700 text-white rounded-lg hover:bg-orange-500 transition"
//               >
//                 {option}
//               </button>
//             ))}
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default TriviaGame;
